ToDo:
=====

1. Separate Branch
   a. Bring all documentation up to new syntax and consolidate into a
      more cohesive set.
   b. Update existing functionality to accept new syntax, up to the
      the limit of current functionality and no further. (Be willing to
      work past this limit if not doing so would impede development.)
2. Separate Branch
   a. Implement new functionality supported by new syntax and structure
      model.


Phases
======
As the program executes, it will step through a series of phases. These
are Pre-processing, Processing, Randomization, Post-processing.

Pre-Processing
--------------
(This phase has been described in /doc/future/pipeline.txt.)


Processing
----------
Input: meta-file
Output: actor list

Actor list: [<actor object>, <actor object>, ...]
Actor object: {"name": <text left of colon, stripped>,
               "group": <most recent group label, if any, else None>,
               "bonus": <(int) to right of colon>,
               "keyword": <text to right of bonus, if any, else None>}


Randomization
-------------
Operates on list of actor objects, generating a d20 roll for each.

Actor object: {..., "roll": <random (int) between 1 and 20>}


Post-processing
---------------
Input: list of actor objects
Output: Pretty-printed results


Capability
==========
* Allow comments to be used on any line, such that everything right of the
  comment is ignored.
* Ensure that file paths, input, and output work across various platforms.
* Allow actors to have forced initiative positions. For instance, moving water
  might move affected characters at initiative position 15, every round.
  * Make this a keyword.
      `Moving Water: 15 force`
    Doing so maintains the standard that explicit is better than implicit.
  * No reason to consider other keywords as none apply. (Raise warning if given?)
  * No reason to roll an iniative result as its result is predefined.
* Extend -v to accept an integer:
  * [-v level|--verbosity level]
  * 0 default; display normal
  * 1 show roll and bonus values
  * 2 show groups
  * 3 do both 1 and 2
* Add a mode that halts the program after the input file has been fully
  expanded---all includes have been followed and inserted---dumping the final
  version of the file to stdout. Does stdout (rather than print) allow use of pipe?
  I don't know that it does, or conversely that print doesn't.
  * `[-e|--expand]`, `[-d|--dump]`
    (XXX This is done in compilation and assembly. What flag is used then?)
  * We could make this more general by allowing it to dump after any stage in
    the pipeline. Default would be the last stage, but the user could dump after
    any specific stage is completed.

      `[--dump-after <preprocess|process|randomization|postprocess>]`

    We would need to add something like `if settings.dump-after == "process"`
    between each stage in `main()`.


Strictness/Enforcement
======================
* Require `<namewords>: <bonus> [keyword]` ordering of terms. A complete
  syntax has been designed and can be found in concept/syntax.init.
* Add [-w|--warning] flag to output messages regarding borderline errors.
  * These should be any error in which the program is making an assumption and
    moving on, rather than crashing. One example is the case where an actor is
    given a binary keyword twice, such as advantage. Listing it twice does not
    mean anything different than list it once, so the program assumes you meant
    to write it once. (XXX Is this example realistic? Is there a situation in
    which using two keywords would be correct? If not, having two keywords--
    whatever they may be--should cause an error every time.)
  * Warnings should include file path and line number.
* Any repeated keyword should be considered as though it was written only once.
  * Give warning if -w used.
* Error if conflicting keywords. `advantage` and `disadvantage` should raise
  error, rather than cancelling eachother.
* Use keyword aliases to allow less typing:
  * a, adv, advantage
  * d, dis, disadvantage
  * f, force


Testing
=======
* Use code testing to ensure that things are behaving the way they appear to.
  Things to test:
  * advantage and disadvantage, as well as any other keywords
  * data structures and their manipulation
  * i/o standards for each function
  * file includes
    * circular references
    * correct filepath and linenumber in errors


Documentation
=============
* Complete syntax rules and usage
* Example idea 1
  * Identify points to teach in examples.
  * Build example dungeon with map.
  * Each encounter should focus on a lesson.
    * "At this point, the prisoner has been rendered unconscious. The DM opens
      the `prisoner.init` file and adds a hash (#) in front of the prisoner's
      declaration. This removes the prisoner from all files that reference
      `prisoner.init'."
* Example idea 2
  * Build a library that would be practical for a person running fights.
  * Create folders for characters, enemies, creatures, and factions.
  * Demonstrate references between files in the library.
  * Build a handful of encounters using only a few of those library files.
  * Explain what is being done and why.