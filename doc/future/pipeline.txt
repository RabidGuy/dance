XXX Migrate Phases section of todo.txt into this file and remove from todo.txt.

Phases
======
As the program executes, it will step through a series of phases. These
are:

  1. Pre-processing
    Input: file
    Output: meta-file
  
  2. Processing
    Input: meta-file
    Output: actor list
  
  3. Randomization
    Operates on list of actor objects, generating a d20 roll for each.
  
  4. Post-processing
    Input: actor list
    Output: Pretty-printed results


Phase 1 - Pre-processing
-----------------

Input: path to *.init file
Output: list of line objects representing input file with expanded references

Errors to be caught:
  * Broken references
  * Circular references

While pre-processing, we do depth-first navigation of the input file and all referenced files. The contents of a referenced file are included in the meta-file at the point of reference, as though the content of the referenced file had been content within the referencing file.

When we get to the end of a file during navigation, we put the contents of that file, fully expanded, into a table which is keyed to the file's absolute path. When a file is referenced, we first look into the table to see the absolute path has already been expanded. If it has already been expanded, we duplicate it into the current file and continue. Otherwise, we expand the referenced file, add it to the table, and insert it into the current file before continuing. The table is necessary in order to catch circular references but it may not be necessary to store expanded file content in the table since total lines read per execution should be quite low.

References to missing files and circular references will raise a errors, halting the program. An error message, including the line number as well as the contents of the line, will be printed on termination.

The meta-file we generate is a list of dictionaries. The dictionaries represent all non-blank lines of the source file and its references, in the order they were read.

Meta-file: [<line object>, <line object>, ...]
Row object: {"text": <line of text from file>,
             "filepath": <absolute path to file>,
             "linenumber": <line number in source file>}

In this example, we run the script on the file `~/campaign/scenes/valley_floor.init`.

File structure:

  campaign/
    characters/
      party.init
    monsters/
      warg_rider.init
    scenes/
      valley_floor.init

File contents:

  ```
  # valley_floor.init

  @ party
  insert ../characters/party

  @ goblins
  Goblin Captain: 3
  insert ../monsters/warg_rider
  ```

  ```
  # party.init

  Jaethar: 2
  Delmot: 1
  Mari Mix: 4
  ```

  ```
  # warg_rider.init

  Goblin: 3
  Warg: 2
  ```

Meta-file:

  [
    {
      "text": "@ party",
      "abspath": "/users/alice/campaign/scenes/valley_floor.init",
      "linenumber": 3
    },
    {
      "text": "Jaethar: 2",
      "abspath": "/users/alice/campaign/characters/party.init",
      "linenumber": 3
    },
    {
      "text": "Delmot: 1",
      "abspath": "/users/alice/campaign/characters/party.init",
      "linenumber": 4
    },
    {
      "text": "Mari Mix: 4",
      "abspath": "/users/alice/campaign/characters/party.init",
      "linenumber": 5
    },
    {
      "text": "@ goblins",
      "abspath": "/users/alice/campaign/scenes/valley_floor.init",
      "linenumber": 6
    },
    {
      "text": "Goblin Captain: 3",
      "abspath": "/users/alice/campaign/scenes/valley_floor.init",
      "linenumber": 7
    },
    {
      "text": "Goblin: 3",
      "abspath": "/users/alice/campaign/monsters/warg_rider.init",
      "linenumber": 3
    },
    {
      "text": "Warg: 2",
      "abspath": "/users/alice/campaign/monsters/warg_rider.init",
      "linenumber": 4
    },
  ]


Phase 2 - Processing
--------------

Input: list of line objects
Output: list of actor objects

Errors raised:
  * Empty file content (no content or all content commented out)
  * Syntax errors
  * More than one keyword (update error handling if mutually-compatible keywords added)

Warnings raised:
  * Label with no children (only if label is never used, not if label is used somewhere else)
  * Duplicate name in definitions (same name; same or different bonus/keywords)

Several things happen in this step.
  * A list is created to hold actors.
  * If the line is a comment, the line is removed.
  * Lines which remain after comments are removed are either definitions or group labels.
  * We track the most recent group label by storing it until another is found to replace it. All definitions after the first label will be part of some group. Definitions before the first label--regardless of whether a label exists--are part of no group.
  * Definitions are added to the actor list in the form of a dictionary.
  * The line information is lost in this phase. The "abspath" and "linenumber" are used when outputing an error and are otherwise ignored. The "text" for the line is used to generate the actor object and is then discarded.

[
    insert ../humanoids/elf scout
    insert ../humanoids/elf scout.init

  When an insert is read, we check everything to the end of the line and trim trailing white space. In this example, "../humanoids/elf scout" would be the insertion target, including the whitespace between "elf" and "scout". The file extension may be included but is implied if left out. We do not recognize other file extensions, causing "elf scout.foo" to result in a target of "elf scout.foo.init".
]


Phase 3 - Randomization
----------------

Input: list of actor objects
Output: list of actor objects with individual initiative results


Phase 4 - Post-processing
------------------

Input: list of actor objects with individual initiative results
Output: results, which have been sorted, grouped, and pretty-printed
