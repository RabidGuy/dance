Notice: These notes were written while typing the very basic parts of this application. They are not accurate.


File Contents
=============

Labels

	:<label>
	[definition]
	...

	Labels define grouping for conflict resolution. Actors from the same group that get the same initiative value are grouped together, sharing one initiative row in the program's output. If multiple such groups share the same initiative value, the order is shuffled without modifying any of the groups. All actors sharing a single initiative value still fall between actors with higher and lower values than their own.


Comments

	//[any number of words or characters before EOL]

	Comments must be placed on their own line and are ignored by the program. They can be used to add descriptions within the file as well as to toggle off lines without deleting them.


Definition Syntax

	<nameword> [[nameword] ...] <modint> [[keyword] ...]

	Each defintion must be placed on their own line. They are constructed of one or more name words, exactly one integer, and zero or more keywords.

	Example:

		Quomop Gadsbe 3 adv


Names

	<nameword> [[nameword] ...]

	Names are made of one or more non-integer strings. 


Initiative Bonuses

	<modint>


Keywords

	adv - roll twice, take higher
	disadv - roll twice, take lower


Including Content from Other Files

	# include <filename>


Tokens
======

Input: (Stripped of whitespace, macros, and comments.)

[
	["Quomop", "Gadsbe", "3", "adv"],
	["E-X80-7", "-1"]
]

Psuedocode:

create list, rows
for each line in input:
	create list, tokens
	for each string in line:
		is it an integer?
			append score token to tokens list
			continue
		is it a keyword?
			append keyword token to tokens list
			continue
		append name token to tokens list
	append tokens list to rows list
return rows list

Output:

[
	[{"text": "Quomop", "type": "name"},
	 {"text": "Gadsbe", "type": "name"},
	 {"text": "3", "type": "score"},
	 {"text": "adv", "type": "keyword"}],

	[{"text": "X-80", "type": "name"},
	 {"text": "-1", "type": "score"}]
]


Actors
======

Input:

<from token output>

Psuedocode:

pass

Output:
