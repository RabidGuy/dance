ToDo:
=====

This software works fine exactly as it is, but could be better. These are some
problems and ideas I may address in future updates.

Keep in mind that the focus is ease of use at the game table, rather than
having a feature rich environment. Complexity of use and of the code base
should only increase with great consideration to how it will affect both users
and maintainers. I've intentionally avoided writing anything like a lexer and
have even avoided using regular expression except where they made the code
easier to understand.


Capability
----------
* Add macro style importing from other *.init files so that party.init can
  contain party information for all dungeon rooms and random encounters.
  * Keeping in mind that explicit is better than implicit, it seems best to use
    a descriptive format, such as `include ../inc/party.init`, where all
    references are relative to the referencing file's location.
  * References must contain the entire relative path to the file, including the
    filetype extension. Using the extension differs from Python's import
    statement but is a familiar practice to those who have used includes in
    C-style languages.
* Allow comments to be used on any line, such that everything right of the
  comment is ignored.
* Ensure that file paths, input, and output work across various platforms.
* Allow actors to have forced initiative positions. For instance, moving water
  might move affected characters at initiative position 15, every round.
  * Make this a keyword.
      `Moving Water: 15 force`
    Doing so maintains the standard that explicit is better than implicit.
  * No reason to consider other keywords as none apply. (Raise warning if given?)
  * No reason to roll an iniative result as its result is predefined.
* Extend -v to accept an integer:
  * [-v level|--verbosity level]
  * 0 default; display normal
  * 1 show roll and bonus values
  * 2 show groups
  * 3 do both 1 and 2
* Add a mode that halts the program after the input file has been fully
  expanded---all includes have been followed and inserted---dumping the final
  version of the file to stdout.
  * [-e|--expand], [-d|--dump]


Strictness/Enforcement
----------------------
* Require [<namewords>: <bonus> <keywords>] ordering of terms. A complete
  syntax has been designed and can be found in concept/syntax.init.
* Add [-w|--warning] flag to output messages regarding borderline errors.
  * These should be any error in which the program is making an assumption and
    moving on, rather than crashing. One example is the case where an actor is
    given a binary keyword twice, such as advantage. Listing it twice does not
    mean anything different than list it once, so the program assumes you meant
    to write it once.
  * Warnings should include file path and line number.
* Any repeated keyword should be considered as though it was written only once.
  * Give warning if -w used.
* Error if conflicting keywords. `advantage` and `disadvantage` should raise
  error, rather than cancelling eachother.
* Use keyword aliases to allow less typing:
  * a, adv, advantage
  * d, dis, disadvantage
  * f, force


Investigation
-------------
* Research whether there are any keywords that need to be added and how they
  might work.
* Use code testing to ensure that things are behaving the way they appear to.
  Things to test:
  * advantage and disadvantage, as well as any other keywords
  * data structures and their manipulation
  * i/o standards for each function
  * file includes
