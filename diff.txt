3c3
< #   Copyright 2017 Jack Stout
---
> #   Copyright 2017-2019 Jack Stout
16a17,18
> import os
> import pathlib
21,24c23,29
< def main(filename):
<     tokens = get_tokens_from_file(filename)
<     actors = get_actors_from_tokens(tokens)
<     initiative_order = roll_and_organize_initiative_order(actors)
---
> def main(args):
>     expanded_file = pre_process(args)
>     # process()
>     # shuffle()
>     # post_process()
>     actors = get_actors_from_tokens(expanded_file)
>     initiative_order = roll_and_organize_initiative_order(actors, args)
29,42c34,64
< def get_tokens_from_file(filename):
<     f = open(filename, 'r')
<     lines_of_tokens = []
<     for line in f.readlines():
<         line = line.strip()
<         # Ignore blank lines.
<         if not line:
<             continue
<         # Ignore comments.
<         if line.startswith("//"):
<             continue
<         lines_of_tokens.append(line.split())
<     f.close()
<     return lines_of_tokens
---
> def pre_process(args):
>     expanded_file = include(args.filename)
>     # for line in expanded_file:
>     #     print(line)
>     return expanded_file
> 
> 
> def include(filename, parentdir="."):
>     expanded_file = []
>     filepath = pathlib.Path(os.sep.join([parentdir, filename])).resolve()
>     linenumber = 0
>     with open(filepath) as f:
>         for line in f.readlines():
>             linenumber += 1
>             terms = line.split()
>             if not terms:
>                 continue
>             elif terms[0].startswith("//"):
>                 continue
>             elif terms[0] == "include":
>                 pd = os.path.dirname(filepath)
>                 expanded_file.extend(include(terms[1], pd))
>             else:
>                 # expanded_file.append(' '.join(terms))
>                 row = {
>                     "text": line,
>                     "filepath": filepath,
>                     "linenumber": linenumber
>                 }
>                 expanded_file.append(row)
>     return expanded_file
45c67
< def get_actors_from_tokens(tokens):
---
> def get_actors_from_tokens(lines):
47c69,74
<     # XXX     [name parts, bonus, keywords]
---
>     # XXX     [<namewords>: <bonus> <keywords>]
>     def get_actors(lines):
>         for line in lines:
>             # print(line["filepath"], line["linenumber"])
>             yield line["text"].split()
>     tokens = get_actors(lines)
82c109
< def roll_and_organize_initiative_order(actors):
---
> def roll_and_organize_initiative_order(actors, args):
87c114
<         rolled = [actor["group"], actor["name"]]
---
>         rolled = {"group": actor["group"], "name": actor["name"]}
97c124,128
<         rolled.insert(0, roll + actor["bonus"])
---
>         rolled["score"] = roll + actor["bonus"]
>         if args.verbose:
>             rolled["expression"] = (" [%i] + %i" % (roll, actor["bonus"]))
>         else:
>             rolled["expression"] = ""
103,105c134,136
<         score = actor[0]
<         group = actor[1]
<         name = actor[2]
---
>         score = actor["score"]
>         group = actor["group"]
>         name = actor["name"] + actor["expression"]
137,142c168,174
<     from sys import argv
<     if len(argv) != 2:
<         print("usage: init.py <filename>")
<         exit()
<     filename = argv[1]
<     main(filename)
---
>     import argparse
>     parser = argparse.ArgumentParser()
>     parser.add_argument("filename")
>     parser.add_argument("-v", "--verbose", help="increase output verbosity",
>                         action="store_true")
>     args = parser.parse_args()
>     main(args)
